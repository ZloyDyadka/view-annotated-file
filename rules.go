package main

import (
	"bytes"
	"strconv"
)

var ignoredLines = [...]string{
	"\t",
	"#",
	`.   `,
	`<autogenerated>`,
	`typecheck`,
	`escwalk:`,
	`escflood:`,
	`substituting name`,
	`not substituting name`,
	`<unknown line number>:`,
}

var ignoredContent = [...]string{
	`Before inlining`,
	`After inlining`,
}

type Stat struct {
	Good []string
	Bad  []string
}

type Stats [statCount][2]int

func (stats Stats) String() string {
	r := ""
	for i, v := range stats {
		if i > 0 {
			r += " "
		}
		r += strconv.Itoa(v[0]) + "/" + strconv.Itoa(v[1])
	}
	return r
}

func (stats *Stats) Add(line []byte) {
	for i, stat := range statSpecs {
		for _, keyword := range stat.Good {
			if bytes.Contains(line, []byte(keyword)) {
				(*stats)[i][0]++
			}
		}
		for _, keyword := range stat.Bad {
			if bytes.Contains(line, []byte(keyword)) {
				(*stats)[i][1]++
			}
		}
	}
}

const statCount = 3

var statSpecs = [statCount]Stat{
	{[]string{"can inline", "inlining call to"}, []string{"cannot inline"}},
	{[]string{"does not escape"}, []string{"escapes to heap"}},
	{[]string{"bounds check elided"}, []string{"Found IsInBounds", "Found IsSliceInBounds"}},
}
